import csv
from queue import Queue  # Import modul Queue dari library queue
import tkinter as tk  # Import modul tkinter dengan alias tk
from tkinter import messagebox, filedialog  # Import messagebox dan filedialog dari tkinter
from tkinter import font as tkfont  # Import modul font dari tkinter dengan alias tkfont

# Class Jadwal
class Jadwal:
    def init(self, id, kegiatan, tanggal, waktu, deskripsi):
        self.id = id
        self.kegiatan = kegiatan
        self.tanggal = tanggal
        self.waktu = waktu
        self.deskripsi = deskripsi

    def repr(self):
        return f"{self.id}: {self.kegiatan} pada {self.tanggal} jam {self.waktu} - {self.deskripsi}"

# Class dan List untuk mengelola jadwal
class JadwalManager:
    def init(self):
        self.jadwals = []  # Inisialisasi list kosong untuk menyimpan jadwal-jadwal
        self.counter = 1  # Counter untuk mengatur ID jadwal

    def tambah_jadwal(self, kegiatan, tanggal, waktu, deskripsi):
        new_jadwal = Jadwal(self.counter, kegiatan, tanggal, waktu, deskripsi)  # Membuat objek Jadwal baru
        self.jadwals.append(new_jadwal)  # Menambahkan jadwal baru ke dalam list
        self.counter += 1  # Menambah counter untuk ID berikutnya
        print(f"Jadwal '{kegiatan}' berhasil ditambahkan.")

    def lihat_jadwal(self):  #Implementasi Timsort
        for jadwal in sorted(self.jadwals, key=lambda x: (x.tanggal, x.waktu)):
            print(jadwal)  # Menampilkan semua jadwal yang sudah ada, diurutkan berdasarkan tanggal dan waktu

    def update_jadwal(self, id, kegiatan=None, tanggal=None, waktu=None, deskripsi=None):
        for jadwal in self.jadwals:
            if jadwal.id == id:
                if kegiatan: jadwal.kegiatan = kegiatan  # Update atribut kegiatan jika diberikan
                if tanggal: jadwal.tanggal = tanggal  # Update atribut tanggal jika diberikan
                if waktu: jadwal.waktu = waktu  # Update atribut waktu jika diberikan
                if deskripsi: jadwal.deskripsi = deskripsi  # Update atribut deskripsi jika diberikan
                print(f"Jadwal dengan ID {id} berhasil diupdate.")
                return
        print(f"Jadwal dengan ID {id} tidak ditemukan.")

    def hapus_jadwal(self, id):
        initial_length = len(self.jadwals)  # Panjang awal list jadwal
        self.jadwals = [jadwal for jadwal in self.jadwals if jadwal.id != id]  # Menghapus jadwal berdasarkan ID
        if len(self.jadwals) < initial_length:
            print(f"Jadwal dengan ID {id} berhasil dihapus.")
        else:
            print(f"Jadwal dengan ID {id} tidak ditemukan.")

    def cari_jadwal(self, keyword):  #Implementasi Linear Search
        hasil = [
            jadwal for jadwal in self.jadwals
            if keyword.lower() in jadwal.kegiatan.lower()
        ]  # Mencari jadwal berdasarkan keyword pada kegiatan
        return hasil

    def impor_jadwal_csv(self, filename):
        try:
            with open(filename, mode='r') as file:
                csv_reader = csv.DictReader(file)  # Membaca file CSV sebagai dictionary
                for row in csv_reader:
                    self.tambah_jadwal(row['kegiatan'], row['tanggal'], row['waktu'], row['deskripsi'])  # Menambah jadwal dari data CSV
            print("Impor dari CSV berhasil.")
        except Exception as e:
            print(f"Error: {e}")

# GUI Tkinter
def show_gui():
    def tambah_jadwal():
        kegiatan = entry_kegiatan.get()  # Mengambil nilai dari entry kegiatan
        tanggal = entry_tanggal.get()  # Mengambil nilai dari entry tanggal
        waktu = entry_waktu.get()  # Mengambil nilai dari entry waktu
        deskripsi = entry_deskripsi.get()  # Mengambil nilai dari entry deskripsi
        if kegiatan and tanggal and waktu and deskripsi:
            manager.tambah_jadwal(kegiatan, tanggal, waktu, deskripsi)  # Memanggil fungsi tambah_jadwal dari JadwalManager
            messagebox.showinfo("Sukses", "Jadwal berhasil ditambahkan!")  # Menampilkan messagebox sukses
            lihat_jadwal()  # Refresh daftar jadwal setelah menambahkan
        else:
            messagebox.showwarning("Peringatan", "Semua kolom harus diisi!")  # Menampilkan messagebox peringatan jika ada kolom yang kosong

    def lihat_jadwal():  #Implementasi Timsort untuk GUI
        output_text.delete('1.0', tk.END)  # Menghapus teks pada output_text sebelum menampilkan jadwal baru
        jadwals = sorted(manager.jadwals, key=lambda x: (x.tanggal, x.waktu))  # Mengurutkan jadwal berdasarkan tanggal dan waktu
        for jadwal in jadwals:
            output_text.insert(tk.END, f"{jadwal}\n")  # Memasukkan jadwal ke dalam output_text

    def cari_jadwal():  #Implementasi Linear Search pada GUI
        keyword = entry_cari.get()  # Mengambil nilai dari entry cari
        hasil = manager.cari_jadwal(keyword)  # Memanggil fungsi cari_jadwal dari JadwalManager
        output_text.delete('1.0', tk.END)  # Menghapus teks pada output_text sebelum menampilkan hasil pencarian
        if hasil:
            for jadwal in hasil:
                output_text.insert(tk.END, f"{jadwal}\n")  # Memasukkan hasil pencarian ke dalam output_text
        else:
            output_text.insert(tk.END, "Jadwal tidak ditemukan.")  # Menampilkan pesan jika jadwal tidak ditemukan

    def hapus_jadwal():
        try:
            id_jadwal = int(entry_hapus.get())  # Mengambil ID jadwal yang akan dihapus
            manager.hapus_jadwal(id_jadwal)  # Memanggil fungsi hapus_jadwal dari JadwalManager
            messagebox.showinfo("Sukses", f"Jadwal dengan ID {id_jadwal} berhasil dihapus!")  # Menampilkan messagebox sukses
            lihat_jadwal()  # Refresh daftar jadwal setelah menghapus
        except ValueError:
            messagebox.showerror("Error", "ID Jadwal harus berupa angka.")  # Menampilkan messagebox error jika ID tidak valid

    def update_jadwal_popup():
        def update_jadwal():
            try:
                id_jadwal = int(entry_id_update.get())  # Mengambil ID jadwal yang akan diupdate
                kegiatan = entry_kegiatan_update.get()  # Mengambil nilai dari entry kegiatan update
                tanggal = entry_tanggal_update.get()  # Mengambil nilai dari entry tanggal update
                waktu = entry_waktu_update.get()  # Mengambil nilai dari entry waktu update
                deskripsi = entry_deskripsi_update.get()  # Mengambil nilai dari entry deskripsi update
                manager.update_jadwal(id_jadwal, kegiatan, tanggal, waktu, deskripsi)  # Memanggil fungsi update_jadwal dari JadwalManager
                messagebox.showinfo("Sukses", f"Jadwal dengan ID {id_jadwal} berhasil diupdate!")  # Menampilkan messagebox sukses
                lihat_jadwal()  # Refresh daftar jadwal setelah mengupdate
                update_window.destroy()  # Menutup jendela update setelah update selesai
            except ValueError:
                messagebox.showerror("Error", "ID Jadwal harus berupa angka.")  # Menampilkan messagebox error jika ID tidak valid

        update_window = tk.Toplevel(root)  # Membuat jendela popup untuk update jadwal
        update_window.title("Update Jadwal")  # Memberi judul pada jendela update
        update_window.configure(bg="#273c75")  # Mengatur warna latar belakang jendela

        tk.Label(update_window, text="Update Jadwal (ID):", bg="#273c75", fg="#ffffff").grid(row=0, column=0, padx=5, pady=5)  # Label untuk ID jadwal
        entry_id_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")  # Entry untuk mengisi ID jadwal
        entry_id_update.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Kegiatan:", bg="#273c75", fg="#ffffff").grid(row=1, column=0, padx=5, pady=5)  # Label untuk kegiatan
        entry_kegiatan_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")  # Entry untuk mengisi kegiatan baru
        entry_kegiatan_update.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Tanggal:", bg="#273c75", fg="#ffffff").grid(row=2, column=0, padx=5, pady=5)  # Label untuk tanggal
        entry_tanggal_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")  # Entry untuk mengisi tanggal baru
        entry_tanggal_update.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Waktu:", bg="#273c75", fg="#ffffff").grid(row=3, column=0, padx=5, pady=5)  # Label untuk waktu
        entry_waktu_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")  # Entry untuk mengisi waktu baru
        entry_waktu_update.grid(row=3, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Deskripsi:", bg="#273c75", fg="#ffffff").grid(row=4, column=0, padx=5, pady=5)  # Label untuk deskripsi
        entry_deskripsi_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")  # Entry untuk mengisi deskripsi baru
        entry_deskripsi_update.grid(row=4, column=1, padx=5, pady=5)

        tk.Button(update_window,
                  text="Update",
                  command=update_jadwal,
                  bg="#f39c12",
                  fg="#ffffff").grid(row=5, column=1, padx=5, pady=5)  # Button untuk melakukan update

    def import_csv():
        filename = filedialog.askopenfilename(title="Pilih file CSV", filetypes=(("CSV files", ".csv"), ("All files", ".*")))  # Meminta pengguna untuk memilih file CSV
        if filename:
            manager.impor_jadwal_csv(filename)  # Memanggil fungsi impor_jadwal_csv dari JadwalManager
            messagebox.showinfo("Sukses", "Impor dari CSV berhasil!")  # Menampilkan messagebox sukses
            lihat_jadwal()  # Refresh daftar jadwal setelah mengimpor
